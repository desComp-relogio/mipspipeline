// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2018 14:20:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          memoriaDeDados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memoriaDeDados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [31:0] DADO_W;
reg [15:0] ENDERECO;
reg ESCREVER;
reg LER;
// wires                                               
wire [31:0] DADO_R;

// assign statements (if any)                          
memoriaDeDados i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DADO_R(DADO_R),
	.DADO_W(DADO_W),
	.ENDERECO(ENDERECO),
	.ESCREVER(ESCREVER),
	.LER(LER)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// DADO_W[ 31 ]
initial
begin
	DADO_W[31] = 1'b0;
end 
// DADO_W[ 30 ]
initial
begin
	DADO_W[30] = 1'b0;
end 
// DADO_W[ 29 ]
initial
begin
	DADO_W[29] = 1'b0;
end 
// DADO_W[ 28 ]
initial
begin
	DADO_W[28] = 1'b0;
end 
// DADO_W[ 27 ]
initial
begin
	DADO_W[27] = 1'b0;
end 
// DADO_W[ 26 ]
initial
begin
	DADO_W[26] = 1'b0;
end 
// DADO_W[ 25 ]
initial
begin
	DADO_W[25] = 1'b0;
end 
// DADO_W[ 24 ]
initial
begin
	DADO_W[24] = 1'b0;
end 
// DADO_W[ 23 ]
initial
begin
	DADO_W[23] = 1'b0;
end 
// DADO_W[ 22 ]
initial
begin
	DADO_W[22] = 1'b0;
end 
// DADO_W[ 21 ]
initial
begin
	DADO_W[21] = 1'b0;
end 
// DADO_W[ 20 ]
initial
begin
	DADO_W[20] = 1'b0;
end 
// DADO_W[ 19 ]
initial
begin
	DADO_W[19] = 1'b0;
end 
// DADO_W[ 18 ]
initial
begin
	DADO_W[18] = 1'b0;
end 
// DADO_W[ 17 ]
initial
begin
	DADO_W[17] = 1'b0;
end 
// DADO_W[ 16 ]
initial
begin
	DADO_W[16] = 1'b0;
end 
// DADO_W[ 15 ]
initial
begin
	DADO_W[15] = 1'b0;
end 
// DADO_W[ 14 ]
initial
begin
	DADO_W[14] = 1'b0;
end 
// DADO_W[ 13 ]
initial
begin
	DADO_W[13] = 1'b0;
end 
// DADO_W[ 12 ]
initial
begin
	DADO_W[12] = 1'b0;
end 
// DADO_W[ 11 ]
initial
begin
	DADO_W[11] = 1'b0;
end 
// DADO_W[ 10 ]
initial
begin
	DADO_W[10] = 1'b0;
end 
// DADO_W[ 9 ]
initial
begin
	DADO_W[9] = 1'b0;
end 
// DADO_W[ 8 ]
initial
begin
	DADO_W[8] = 1'b0;
end 
// DADO_W[ 7 ]
initial
begin
	DADO_W[7] = 1'b0;
end 
// DADO_W[ 6 ]
initial
begin
	DADO_W[6] = 1'b0;
end 
// DADO_W[ 5 ]
initial
begin
	DADO_W[5] = 1'b0;
end 
// DADO_W[ 4 ]
initial
begin
	DADO_W[4] = 1'b0;
end 
// DADO_W[ 3 ]
initial
begin
	DADO_W[3] = 1'b0;
end 
// DADO_W[ 2 ]
initial
begin
	DADO_W[2] = 1'b0;
	DADO_W[2] = #340000 1'b1;
	DADO_W[2] = #90000 1'b0;
end 
// DADO_W[ 1 ]
initial
begin
	DADO_W[1] = 1'b1;
end 
// DADO_W[ 0 ]
initial
begin
	DADO_W[0] = 1'b1;
end 
// ENDERECO[ 15 ]
initial
begin
	ENDERECO[15] = 1'b0;
end 
// ENDERECO[ 14 ]
initial
begin
	ENDERECO[14] = 1'b0;
end 
// ENDERECO[ 13 ]
initial
begin
	ENDERECO[13] = 1'b0;
end 
// ENDERECO[ 12 ]
initial
begin
	ENDERECO[12] = 1'b0;
end 
// ENDERECO[ 11 ]
initial
begin
	ENDERECO[11] = 1'b0;
end 
// ENDERECO[ 10 ]
initial
begin
	ENDERECO[10] = 1'b0;
end 
// ENDERECO[ 9 ]
initial
begin
	ENDERECO[9] = 1'b0;
end 
// ENDERECO[ 8 ]
initial
begin
	ENDERECO[8] = 1'b0;
end 
// ENDERECO[ 7 ]
initial
begin
	ENDERECO[7] = 1'b0;
end 
// ENDERECO[ 6 ]
initial
begin
	ENDERECO[6] = 1'b0;
end 
// ENDERECO[ 5 ]
initial
begin
	ENDERECO[5] = 1'b0;
end 
// ENDERECO[ 4 ]
initial
begin
	ENDERECO[4] = 1'b0;
end 
// ENDERECO[ 3 ]
initial
begin
	ENDERECO[3] = 1'b0;
end 
// ENDERECO[ 2 ]
initial
begin
	ENDERECO[2] = 1'b0;
end 
// ENDERECO[ 1 ]
initial
begin
	ENDERECO[1] = 1'b0;
end 
// ENDERECO[ 0 ]
initial
begin
	ENDERECO[0] = 1'b0;
end 

// ESCREVER
initial
begin
	ESCREVER = 1'b0;
	ESCREVER = #10000 1'b1;
	ESCREVER = #50000 1'b0;
	ESCREVER = #280000 1'b1;
	ESCREVER = #40000 1'b0;
end 

// LER
initial
begin
	LER = 1'b0;
	LER = #100000 1'b1;
	LER = #100000 1'b0;
	LER = #200000 1'b1;
	LER = #90000 1'b0;
end 
endmodule

