// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/23/2018 18:09:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bancoRegistradores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bancoRegistradores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [31:0] DADO_W_REG3;
reg [4:0] END1;
reg [4:0] END2;
reg [4:0] END3;
reg HAB_ESCRITA_REG;
// wires                                               
wire [31:0] DADO_R_REG1;
wire [31:0] DADO_R_REG2;

// assign statements (if any)                          
bancoRegistradores i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DADO_R_REG1(DADO_R_REG1),
	.DADO_R_REG2(DADO_R_REG2),
	.DADO_W_REG3(DADO_W_REG3),
	.END1(END1),
	.END2(END2),
	.END3(END3),
	.HAB_ESCRITA_REG(HAB_ESCRITA_REG)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// DADO_W_REG3[ 31 ]
initial
begin
	DADO_W_REG3[31] = 1'b0;
end 
// DADO_W_REG3[ 30 ]
initial
begin
	DADO_W_REG3[30] = 1'b0;
end 
// DADO_W_REG3[ 29 ]
initial
begin
	DADO_W_REG3[29] = 1'b0;
end 
// DADO_W_REG3[ 28 ]
initial
begin
	DADO_W_REG3[28] = 1'b0;
end 
// DADO_W_REG3[ 27 ]
initial
begin
	DADO_W_REG3[27] = 1'b0;
end 
// DADO_W_REG3[ 26 ]
initial
begin
	DADO_W_REG3[26] = 1'b0;
end 
// DADO_W_REG3[ 25 ]
initial
begin
	DADO_W_REG3[25] = 1'b0;
end 
// DADO_W_REG3[ 24 ]
initial
begin
	DADO_W_REG3[24] = 1'b0;
end 
// DADO_W_REG3[ 23 ]
initial
begin
	DADO_W_REG3[23] = 1'b0;
end 
// DADO_W_REG3[ 22 ]
initial
begin
	DADO_W_REG3[22] = 1'b0;
end 
// DADO_W_REG3[ 21 ]
initial
begin
	DADO_W_REG3[21] = 1'b0;
end 
// DADO_W_REG3[ 20 ]
initial
begin
	DADO_W_REG3[20] = 1'b0;
end 
// DADO_W_REG3[ 19 ]
initial
begin
	DADO_W_REG3[19] = 1'b0;
end 
// DADO_W_REG3[ 18 ]
initial
begin
	DADO_W_REG3[18] = 1'b0;
end 
// DADO_W_REG3[ 17 ]
initial
begin
	DADO_W_REG3[17] = 1'b0;
end 
// DADO_W_REG3[ 16 ]
initial
begin
	DADO_W_REG3[16] = 1'b0;
end 
// DADO_W_REG3[ 15 ]
initial
begin
	DADO_W_REG3[15] = 1'b0;
end 
// DADO_W_REG3[ 14 ]
initial
begin
	DADO_W_REG3[14] = 1'b0;
end 
// DADO_W_REG3[ 13 ]
initial
begin
	DADO_W_REG3[13] = 1'b0;
end 
// DADO_W_REG3[ 12 ]
initial
begin
	DADO_W_REG3[12] = 1'b0;
end 
// DADO_W_REG3[ 11 ]
initial
begin
	DADO_W_REG3[11] = 1'b0;
end 
// DADO_W_REG3[ 10 ]
initial
begin
	DADO_W_REG3[10] = 1'b0;
end 
// DADO_W_REG3[ 9 ]
initial
begin
	DADO_W_REG3[9] = 1'b0;
end 
// DADO_W_REG3[ 8 ]
initial
begin
	DADO_W_REG3[8] = 1'b0;
end 
// DADO_W_REG3[ 7 ]
initial
begin
	DADO_W_REG3[7] = 1'b0;
end 
// DADO_W_REG3[ 6 ]
initial
begin
	DADO_W_REG3[6] = 1'b0;
end 
// DADO_W_REG3[ 5 ]
initial
begin
	DADO_W_REG3[5] = 1'b0;
end 
// DADO_W_REG3[ 4 ]
initial
begin
	DADO_W_REG3[4] = 1'b0;
	DADO_W_REG3[4] = #120000 1'b1;
end 
// DADO_W_REG3[ 3 ]
initial
begin
	DADO_W_REG3[3] = 1'b1;
	DADO_W_REG3[3] = #120000 1'b0;
end 
// DADO_W_REG3[ 2 ]
initial
begin
	DADO_W_REG3[2] = 1'b1;
	DADO_W_REG3[2] = #120000 1'b0;
end 
// DADO_W_REG3[ 1 ]
initial
begin
	DADO_W_REG3[1] = 1'b0;
end 
// DADO_W_REG3[ 0 ]
initial
begin
	DADO_W_REG3[0] = 1'b1;
end 
// END1[ 4 ]
initial
begin
	END1[4] = 1'b0;
end 
// END1[ 3 ]
initial
begin
	END1[3] = 1'b0;
end 
// END1[ 2 ]
initial
begin
	END1[2] = 1'b0;
end 
// END1[ 1 ]
initial
begin
	END1[1] = 1'b0;
end 
// END1[ 0 ]
initial
begin
	END1[0] = 1'b1;
end 
// END2[ 4 ]
initial
begin
	END2[4] = 1'b0;
end 
// END2[ 3 ]
initial
begin
	END2[3] = 1'b0;
end 
// END2[ 2 ]
initial
begin
	END2[2] = 1'b0;
end 
// END2[ 1 ]
initial
begin
	END2[1] = 1'b1;
end 
// END2[ 0 ]
initial
begin
	END2[0] = 1'b0;
end 
// END3[ 4 ]
initial
begin
	END3[4] = 1'b0;
end 
// END3[ 3 ]
initial
begin
	END3[3] = 1'b0;
end 
// END3[ 2 ]
initial
begin
	END3[2] = 1'b0;
end 
// END3[ 1 ]
initial
begin
	END3[1] = 1'b0;
	END3[1] = #60000 1'b1;
end 
// END3[ 0 ]
initial
begin
	END3[0] = 1'b1;
	END3[0] = #60000 1'b0;
end 

// HAB_ESCRITA_REG
initial
begin
	HAB_ESCRITA_REG = 1'b0;
	HAB_ESCRITA_REG = #30000 1'b1;
	HAB_ESCRITA_REG = #60000 1'b0;
	HAB_ESCRITA_REG = #120000 1'b1;
	HAB_ESCRITA_REG = #70000 1'b0;
end 
endmodule

