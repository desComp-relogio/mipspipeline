// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2018 19:17:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mipsFd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mipsFd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BEQ;
reg CLK;
reg [31:0] DATA_MEM_R;
reg EN_BUT;
reg HAB_ESCRITA_MEM;
reg HAB_ESCRITA_REG;
reg HAB_LEITURA_MEM;
reg MUX_PC_BEQ_JMP;
reg MUX_RT_IMM;
reg MUX_RT_RD;
reg MUX_ULA_MEM;
reg [1:0] ULA_OP;
// wires                                               
wire [31:0] DADO_LIDO_1;
wire [31:0] DADO_LIDO_2;
wire [31:0] DATA_MEM_W;
wire [4:0] END1;
wire [4:0] END2;
wire [4:0] END3;
wire [31:0] END_MEM;
wire [5:0] INST_OPCODE;
wire [31:0] MEM_OUT;
wire [31:0] ULA_OUT;

// assign statements (if any)                          
mipsFd i1 (
// port map - connection between master ports and signals/registers   
	.BEQ(BEQ),
	.CLK(CLK),
	.DADO_LIDO_1(DADO_LIDO_1),
	.DADO_LIDO_2(DADO_LIDO_2),
	.DATA_MEM_R(DATA_MEM_R),
	.DATA_MEM_W(DATA_MEM_W),
	.EN_BUT(EN_BUT),
	.END1(END1),
	.END2(END2),
	.END3(END3),
	.END_MEM(END_MEM),
	.HAB_ESCRITA_MEM(HAB_ESCRITA_MEM),
	.HAB_ESCRITA_REG(HAB_ESCRITA_REG),
	.HAB_LEITURA_MEM(HAB_LEITURA_MEM),
	.INST_OPCODE(INST_OPCODE),
	.MEM_OUT(MEM_OUT),
	.MUX_PC_BEQ_JMP(MUX_PC_BEQ_JMP),
	.MUX_RT_IMM(MUX_RT_IMM),
	.MUX_RT_RD(MUX_RT_RD),
	.MUX_ULA_MEM(MUX_ULA_MEM),
	.ULA_OP(ULA_OP),
	.ULA_OUT(ULA_OUT)
);
initial 
begin 
#1000000 $finish;
end 

// MUX_PC_BEQ_JMP
initial
begin
	MUX_PC_BEQ_JMP = 1'b0;
end 

// MUX_RT_RD
initial
begin
	MUX_RT_RD = 1'b0;
	MUX_RT_RD = #50000 1'b1;
end 

// HAB_ESCRITA_REG
initial
begin
	HAB_ESCRITA_REG = 1'b0;
	HAB_ESCRITA_REG = #30000 1'b1;
end 

// MUX_RT_IMM
initial
begin
	MUX_RT_IMM = 1'b0;
	MUX_RT_IMM = #30000 1'b1;
	MUX_RT_IMM = #20000 1'b0;
end 

// MUX_ULA_MEM
initial
begin
	MUX_ULA_MEM = 1'b0;
	MUX_ULA_MEM = #30000 1'b1;
	MUX_ULA_MEM = #20000 1'b0;
end 

// BEQ
initial
begin
	BEQ = 1'b0;
end 

// HAB_LEITURA_MEM
initial
begin
	HAB_LEITURA_MEM = 1'b0;
	HAB_LEITURA_MEM = #30000 1'b1;
	HAB_LEITURA_MEM = #20000 1'b0;
end 

// HAB_ESCRITA_MEM
initial
begin
	HAB_ESCRITA_MEM = 1'b0;
end 
// ULA_OP[ 1 ]
initial
begin
	ULA_OP[1] = 1'b0;
	ULA_OP[1] = #50000 1'b1;
end 
// ULA_OP[ 0 ]
initial
begin
	ULA_OP[0] = 1'b0;
end 

// EN_BUT
initial
begin
	EN_BUT = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// DATA_MEM_R[ 31 ]
initial
begin
	DATA_MEM_R[31] = 1'b0;
end 
// DATA_MEM_R[ 30 ]
initial
begin
	DATA_MEM_R[30] = 1'b0;
end 
// DATA_MEM_R[ 29 ]
initial
begin
	DATA_MEM_R[29] = 1'b0;
end 
// DATA_MEM_R[ 28 ]
initial
begin
	DATA_MEM_R[28] = 1'b0;
end 
// DATA_MEM_R[ 27 ]
initial
begin
	DATA_MEM_R[27] = 1'b0;
end 
// DATA_MEM_R[ 26 ]
initial
begin
	DATA_MEM_R[26] = 1'b0;
end 
// DATA_MEM_R[ 25 ]
initial
begin
	DATA_MEM_R[25] = 1'b0;
end 
// DATA_MEM_R[ 24 ]
initial
begin
	DATA_MEM_R[24] = 1'b0;
end 
// DATA_MEM_R[ 23 ]
initial
begin
	DATA_MEM_R[23] = 1'b0;
end 
// DATA_MEM_R[ 22 ]
initial
begin
	DATA_MEM_R[22] = 1'b0;
end 
// DATA_MEM_R[ 21 ]
initial
begin
	DATA_MEM_R[21] = 1'b0;
end 
// DATA_MEM_R[ 20 ]
initial
begin
	DATA_MEM_R[20] = 1'b0;
end 
// DATA_MEM_R[ 19 ]
initial
begin
	DATA_MEM_R[19] = 1'b0;
end 
// DATA_MEM_R[ 18 ]
initial
begin
	DATA_MEM_R[18] = 1'b0;
end 
// DATA_MEM_R[ 17 ]
initial
begin
	DATA_MEM_R[17] = 1'b0;
end 
// DATA_MEM_R[ 16 ]
initial
begin
	DATA_MEM_R[16] = 1'b0;
end 
// DATA_MEM_R[ 15 ]
initial
begin
	DATA_MEM_R[15] = 1'b0;
end 
// DATA_MEM_R[ 14 ]
initial
begin
	DATA_MEM_R[14] = 1'b0;
end 
// DATA_MEM_R[ 13 ]
initial
begin
	DATA_MEM_R[13] = 1'b0;
end 
// DATA_MEM_R[ 12 ]
initial
begin
	DATA_MEM_R[12] = 1'b0;
end 
// DATA_MEM_R[ 11 ]
initial
begin
	DATA_MEM_R[11] = 1'b0;
end 
// DATA_MEM_R[ 10 ]
initial
begin
	DATA_MEM_R[10] = 1'b0;
end 
// DATA_MEM_R[ 9 ]
initial
begin
	DATA_MEM_R[9] = 1'b0;
end 
// DATA_MEM_R[ 8 ]
initial
begin
	DATA_MEM_R[8] = 1'b0;
end 
// DATA_MEM_R[ 7 ]
initial
begin
	DATA_MEM_R[7] = 1'b0;
end 
// DATA_MEM_R[ 6 ]
initial
begin
	DATA_MEM_R[6] = 1'b0;
end 
// DATA_MEM_R[ 5 ]
initial
begin
	DATA_MEM_R[5] = 1'b0;
end 
// DATA_MEM_R[ 4 ]
initial
begin
	DATA_MEM_R[4] = 1'b0;
end 
// DATA_MEM_R[ 3 ]
initial
begin
	DATA_MEM_R[3] = 1'b0;
end 
// DATA_MEM_R[ 2 ]
initial
begin
	DATA_MEM_R[2] = 1'b0;
	DATA_MEM_R[2] = #50000 1'b1;
end 
// DATA_MEM_R[ 1 ]
initial
begin
	DATA_MEM_R[1] = 1'b0;
end 
// DATA_MEM_R[ 0 ]
initial
begin
	DATA_MEM_R[0] = 1'b0;
end 
endmodule

